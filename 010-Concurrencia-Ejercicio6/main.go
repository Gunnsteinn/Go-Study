package main

import (
	"encoding/json"
	"fmt"
	"github.com/Pallinder/go-randomdata"
	"io/ioutil"
	"math/rand"
	"sync"
	"time"
)

type AutoGenerated struct {
	Name    string `json:"Name"`
	Code    string `json:"Code"`
	Age     int    `json:"Age"`
	Country string `json:"Country"`
}

var letterRunes = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
var nameArr = []string{"Rodri", "Enzo", "Fran", "Harmy", "Gun"}

const SIZE = 70000

func main() {
	rand.Seed(time.Now().UnixNano())
	var arr1 []AutoGenerated

	var wg sync.WaitGroup
	wg.Add(SIZE)
	var mu sync.Mutex

	for i := 0; i < SIZE; i++ {
		go func() {
			mu.Lock()
			x := AutoGenerated{
				Name:    nameArr[rand.Intn(5-0)+0],
				Code:    RandStringRunes(10),
				Age:     rand.Intn(100-1) + 1,
				Country: randomdata.Country(randomdata.FullCountry),
			}
			arr1 = append(arr1, x)
			mu.Unlock()
			wg.Done()
		}()

	}

	wg.Wait()

	rankingsJson, _ := json.Marshal(arr1)
	err := ioutil.WriteFile("output.json", rankingsJson, 0644)
	if err != nil {
		fmt.Println("opening config file", err.Error())
	}

}

func RandStringRunes(n int) string {
	b := make([]rune, n)
	for i := range b {
		b[i] = letterRunes[rand.Intn(len(letterRunes))]
	}
	return string(b)
}
